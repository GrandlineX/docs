{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GrandLineX Welcome to the GrandLineX Documentation GrandLineX is an out-of-the-box server framework on top of ExpressJs. Goto Moduels for details. Short Links Kernel Skeleton Project Project-Tool Docs to OpenApi","title":"Home"},{"location":"#grandlinex","text":"","title":"GrandLineX"},{"location":"#welcome-to-the-grandlinex-documentation","text":"GrandLineX is an out-of-the-box server framework on top of ExpressJs. Goto Moduels for details.","title":"Welcome to the GrandLineX Documentation"},{"location":"#short-links","text":"Kernel Skeleton Project Project-Tool Docs to OpenApi","title":"Short Links"},{"location":"modules/","text":"Kernel Kernel features Extendable module structure Managed DB Connection Encrypted credential store Backend authorization with JWT Documentation Version 0.9.x Kernel Docs Kernel API - SwaggerUI Structure Quick start (Skeleton Project) Includes Full Typescript project setup Jest test and coverage config Docker-Compose file for Development Database ESLint config with AirBnB & Prettier presets GrandLineX OpenApi generator config Example Kernel Extension code @/src Variant 1 (GrandlineX cli) Run npm i @grandlinex/project-tool -g Start cli gltool -i Select the new project option. Follow the instructions. Variant 2 (clone project) Clone git clone https://github.com/GrandlineX/skeleton-project.git && cd skeleton-project Install dependencies npm instsall Start database docker-compose up -d Build project npm run build Build project npm run start Skeleton project commands Command Description npm run lint start ESLint npm run test start Jest test collection (creates db entry's) npm run test-converage start Jest test collection + coverage report (creates db entry's) npm run start-dev start dev script with disabled cors npm run makeDocs generates Typedoc documentation npm run makeSpec generates OpenApi spec see npm run serveSpec generates OpenApi spec see + serve Swagger UI Manual install (Existing Project) Before we can use the GrandLineX Kernel we need to set up a PostgressDB. If you want to use an existing DB go to step 7. A simple way to do this is to use a Docker container. If you dount have docker see here Create a docker-compose.yml file. Use a editor services: dev-db: image: postgres volumes: - ./data/db:/var/lib/postgresql/data env_file: - .env ports: - 5432:5432 Or run wget https://raw.githubusercontent.com/GrandlineX/kernel/main/docker-compose.yml -O docker-compose.yml Create a .env file in the root folder of your Project Use a editor DBPATH=localhost DBPORT=5432 POSTGRES_PASSWORD=example POSTGRES_USER=dbuser SERVER_PASSWOR=pw PUBLICDOMAIN=http://localhost Or run wget https://raw.githubusercontent.com/GrandlineX/kernel/main/.env.example -O .env Now we can start the database with docker-compose up -d or docker compose up -d Install the kernel package npm i @grandlinex/kernel Create a Basic Kernel Object main.ts/main.js import Kernel from '@grandlinex/kernel'; import * as path from 'path'; const configPaht = Path.join(__dirname,'config'); const kernel = new Kernel(\"AppName\",\"appcode\",configPaht); kernel.start(); Start node main.js \\ ts-node main.ts","title":"Modules"},{"location":"modules/#kernel","text":"","title":"Kernel"},{"location":"modules/#kernel-features","text":"Extendable module structure Managed DB Connection Encrypted credential store Backend authorization with JWT","title":"Kernel features"},{"location":"modules/#documentation","text":"","title":"Documentation"},{"location":"modules/#version-09x","text":"Kernel Docs Kernel API - SwaggerUI","title":"Version 0.9.x"},{"location":"modules/#structure","text":"","title":"Structure"},{"location":"modules/#quick-start-skeleton-project","text":"","title":"Quick start (Skeleton Project)"},{"location":"modules/#includes","text":"Full Typescript project setup Jest test and coverage config Docker-Compose file for Development Database ESLint config with AirBnB & Prettier presets GrandLineX OpenApi generator config Example Kernel Extension code @/src","title":"Includes"},{"location":"modules/#variant-1-grandlinex-cli","text":"Run npm i @grandlinex/project-tool -g Start cli gltool -i Select the new project option. Follow the instructions.","title":"Variant 1 (GrandlineX cli)"},{"location":"modules/#variant-2-clone-project","text":"Clone git clone https://github.com/GrandlineX/skeleton-project.git && cd skeleton-project Install dependencies npm instsall Start database docker-compose up -d Build project npm run build Build project npm run start","title":"Variant 2 (clone project)"},{"location":"modules/#skeleton-project-commands","text":"Command Description npm run lint start ESLint npm run test start Jest test collection (creates db entry's) npm run test-converage start Jest test collection + coverage report (creates db entry's) npm run start-dev start dev script with disabled cors npm run makeDocs generates Typedoc documentation npm run makeSpec generates OpenApi spec see npm run serveSpec generates OpenApi spec see + serve Swagger UI","title":"Skeleton project commands"},{"location":"modules/#manual-install-existing-project","text":"Before we can use the GrandLineX Kernel we need to set up a PostgressDB. If you want to use an existing DB go to step 7. A simple way to do this is to use a Docker container. If you dount have docker see here Create a docker-compose.yml file. Use a editor services: dev-db: image: postgres volumes: - ./data/db:/var/lib/postgresql/data env_file: - .env ports: - 5432:5432 Or run wget https://raw.githubusercontent.com/GrandlineX/kernel/main/docker-compose.yml -O docker-compose.yml Create a .env file in the root folder of your Project Use a editor DBPATH=localhost DBPORT=5432 POSTGRES_PASSWORD=example POSTGRES_USER=dbuser SERVER_PASSWOR=pw PUBLICDOMAIN=http://localhost Or run wget https://raw.githubusercontent.com/GrandlineX/kernel/main/.env.example -O .env Now we can start the database with docker-compose up -d or docker compose up -d Install the kernel package npm i @grandlinex/kernel Create a Basic Kernel Object main.ts/main.js import Kernel from '@grandlinex/kernel'; import * as path from 'path'; const configPaht = Path.join(__dirname,'config'); const kernel = new Kernel(\"AppName\",\"appcode\",configPaht); kernel.start(); Start node main.js \\ ts-node main.ts","title":"Manual install (Existing Project)"},{"location":"utils/","text":"Util List Project-Tool Docs to OpenApi Project-Tool Description Cli for the GrandLineX Project Features Create new GrandLineX project with customizable project setup. Update GrandLineX packages Quick start Run npm i -g @grandlinex/project-tool Start CLI gltool -i or npx @grandlinex/project-tool -i Docs to OpenApi v.3 Description This Project converts comments in your code or in your dependencies to an OpenApi Spec . The following annotations are supported: @openapi @swagger All comments with these annotations will be pasted as a singe element in the path definition array. For all other OpenApi configs the glconf.json is used. Installation npm i -g @grandlinex/docs-to-openapi Config fields rootDir Relative path to your sourcecode. filetypes List of file extensions to monitor. externalModules If your dependencies use also these annotations you can merge these in your curren spec. outPutDir (optional) Relative path for the Spec. output. Quick Start Create a glconf.json in the root dir of your project (see config 01 or 02). Edit your base Config file like in the official Swagger Doc Add a Comment to your soruce code in yml syntax like: /** * @openapi * /ping: * get: * summary: ping * tags: * - basic * responses: * 200: * description: OK * 401: * description: not authorized */ run npx @grandlinex/docs-to-openapi If you install the package as a dependency then you can use the makeOpenApi command. CLI Parameter (version >= 0.5.0) Parameter Description command --html Creates a swagger.html file (Standalone SwaggerUI) npx @grandlinex/docs-to-openapi --html --serve Serves the OpenApi Spec on port 9000 npx @grandlinex/docs-to-openapi --serve Config File Examples: Config 01 glconf.json (minimal) { \"rootDir\": \"./src\", \"filetypes\": [\"ts\",\"js\"], \"externalModules\": [], \"baseConfig\": { \"info\": { \"title\": \"Hello World\", \"version\": \"1.0.0\", \"description\": \"A sample API\" }, \"servers\": [ { \"url\": \"http://localhost:9257\" } ] } } Config 02 glconf.json (Bearer JWT) { \"rootDir\": \"./src\", \"filetypes\": [\"ts\",\"js\"], \"externalModules\": [\"./node_modules/module_a\",\"./node_modules/module_b\"], \"outPutDir\": \"./dist\", \"baseConfig\": { \"info\": { \"title\": \"Hello World\", \"version\": \"1.0.0\", \"description\": \"A sample API\" }, \"servers\": [ { \"url\": \"http://localhost:9257\" } ], \"security\": [ { \"bearerAuth\": [] } ], \"components\": { \"securitySchemes\": { \"bearerAuth\": { \"type\": \"http\", \"scheme\": \"bearer\", \"bearerFormat\": \"JWT\" } } } } }","title":"Utils"},{"location":"utils/#util-list","text":"Project-Tool Docs to OpenApi","title":"Util List"},{"location":"utils/#project-tool","text":"","title":"Project-Tool"},{"location":"utils/#description","text":"Cli for the GrandLineX Project","title":"Description"},{"location":"utils/#features","text":"Create new GrandLineX project with customizable project setup. Update GrandLineX packages","title":"Features"},{"location":"utils/#quick-start","text":"Run npm i -g @grandlinex/project-tool Start CLI gltool -i or npx @grandlinex/project-tool -i","title":"Quick start"},{"location":"utils/#docs-to-openapi-v3","text":"","title":"Docs to OpenApi v.3"},{"location":"utils/#description_1","text":"This Project converts comments in your code or in your dependencies to an OpenApi Spec . The following annotations are supported: @openapi @swagger All comments with these annotations will be pasted as a singe element in the path definition array. For all other OpenApi configs the glconf.json is used.","title":"Description"},{"location":"utils/#installation","text":"npm i -g @grandlinex/docs-to-openapi","title":"Installation"},{"location":"utils/#config-fields","text":"rootDir Relative path to your sourcecode. filetypes List of file extensions to monitor. externalModules If your dependencies use also these annotations you can merge these in your curren spec. outPutDir (optional) Relative path for the Spec. output.","title":"Config fields"},{"location":"utils/#quick-start_1","text":"Create a glconf.json in the root dir of your project (see config 01 or 02). Edit your base Config file like in the official Swagger Doc Add a Comment to your soruce code in yml syntax like: /** * @openapi * /ping: * get: * summary: ping * tags: * - basic * responses: * 200: * description: OK * 401: * description: not authorized */ run npx @grandlinex/docs-to-openapi If you install the package as a dependency then you can use the makeOpenApi command.","title":"Quick Start"},{"location":"utils/#cli-parameter-version-050","text":"Parameter Description command --html Creates a swagger.html file (Standalone SwaggerUI) npx @grandlinex/docs-to-openapi --html --serve Serves the OpenApi Spec on port 9000 npx @grandlinex/docs-to-openapi --serve","title":"CLI Parameter (version &gt;= 0.5.0)"},{"location":"utils/#config-file-examples","text":"","title":"Config File Examples:"},{"location":"utils/#config-01-glconfjson-minimal","text":"{ \"rootDir\": \"./src\", \"filetypes\": [\"ts\",\"js\"], \"externalModules\": [], \"baseConfig\": { \"info\": { \"title\": \"Hello World\", \"version\": \"1.0.0\", \"description\": \"A sample API\" }, \"servers\": [ { \"url\": \"http://localhost:9257\" } ] } }","title":"Config 01 glconf.json (minimal)"},{"location":"utils/#config-02-glconfjson-bearer-jwt","text":"{ \"rootDir\": \"./src\", \"filetypes\": [\"ts\",\"js\"], \"externalModules\": [\"./node_modules/module_a\",\"./node_modules/module_b\"], \"outPutDir\": \"./dist\", \"baseConfig\": { \"info\": { \"title\": \"Hello World\", \"version\": \"1.0.0\", \"description\": \"A sample API\" }, \"servers\": [ { \"url\": \"http://localhost:9257\" } ], \"security\": [ { \"bearerAuth\": [] } ], \"components\": { \"securitySchemes\": { \"bearerAuth\": { \"type\": \"http\", \"scheme\": \"bearer\", \"bearerFormat\": \"JWT\" } } } } }","title":"Config 02 glconf.json (Bearer JWT)"}]}