{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the GrandLineX Documentation GrandLineX is an out-of-the-box server framework. Goto intoduction for details. Short Links Intoduction Project Page Project-Tool Sonar Cloud","title":"Home"},{"location":"#welcome-to-the-grandlinex-documentation","text":"GrandLineX is an out-of-the-box server framework. Goto intoduction for details.","title":"Welcome to the GrandLineX Documentation"},{"location":"#short-links","text":"Intoduction Project Page Project-Tool Sonar Cloud","title":"Short Links"},{"location":"concepts/","text":"Structure Quick start (Skeleton Project - ExpressKernel Pack) Includes Full Typescript project setup Jest test and coverage config Docker-Compose file for Development Database ESLint config with AirBnB & Prettier presets GrandLineX OpenApi generator config Example Kernel Extension code @/src Variant 1 (GrandlineX cli) Run npm i @grandlinex/project-tool -g Start cli gltool -i Select the new project option. Follow the instructions. Variant 2 (clone project) Clone git clone https://github.com/GrandlineX/skeleton-project.git && cd skeleton-project Install dependencies npm instsall Start database docker-compose up -d Build project npm run build Build project npm run start Skeleton project commands Command Description npm run lint start ESLint npm run test start Jest test collection (creates db entry's) npm run test-converage start Jest test collection + coverage report (creates db entry's) npm run start-dev start dev script with disabled cors npm run makeDocs generates Typedoc documentation npm run makeSpec generates OpenApi spec see npm run serveSpec generates OpenApi spec see + serve Swagger UI Manual install (Existing Project) Before we can use the GrandLineX Kernel we need to set up a PostgressDB. If you want to use an existing DB go to step 7. A simple way to do this is to use a Docker container. If you dount have docker see here Create a docker-compose.yml file. Use a editor services : dev-db : image : postgres volumes : - ./data/db:/var/lib/postgresql/data env_file : - .env ports : - 5432:5432 Or run wget https://raw.githubusercontent.com/GrandlineX/kernel/main/docker-compose.yml -O docker-compose.yml Create a .env file in the root folder of your Project Use a editor DBPATH = localhost DBPORT = 5432 POSTGRES_PASSWORD = example POSTGRES_USER = dbuser SERVER_PASSWOR = pw PUBLICDOMAIN = http://localhost Or run wget https://raw.githubusercontent.com/GrandlineX/kernel/main/.env.example -O .env Now we can start the database with docker-compose up -d or docker compose up -d Install the kernel package npm i @grandlinex/kernel Create a Basic Kernel Object main.ts/main.js import Kernel from \"@grandlinex/kernel\" const kernel = new Kernel ({ appName : \"AppName\" , appCode : \"appcode\" , }) kernel . start (); Start node main.js \\ ts-node main.ts","title":"Concepts"},{"location":"concepts/#structure","text":"","title":"Structure"},{"location":"concepts/#quick-start-skeleton-project-expresskernel-pack","text":"","title":"Quick start (Skeleton Project - ExpressKernel Pack)"},{"location":"concepts/#includes","text":"Full Typescript project setup Jest test and coverage config Docker-Compose file for Development Database ESLint config with AirBnB & Prettier presets GrandLineX OpenApi generator config Example Kernel Extension code @/src","title":"Includes"},{"location":"concepts/#variant-1-grandlinex-cli","text":"Run npm i @grandlinex/project-tool -g Start cli gltool -i Select the new project option. Follow the instructions.","title":"Variant 1 (GrandlineX cli)"},{"location":"concepts/#variant-2-clone-project","text":"Clone git clone https://github.com/GrandlineX/skeleton-project.git && cd skeleton-project Install dependencies npm instsall Start database docker-compose up -d Build project npm run build Build project npm run start","title":"Variant 2 (clone project)"},{"location":"concepts/#skeleton-project-commands","text":"Command Description npm run lint start ESLint npm run test start Jest test collection (creates db entry's) npm run test-converage start Jest test collection + coverage report (creates db entry's) npm run start-dev start dev script with disabled cors npm run makeDocs generates Typedoc documentation npm run makeSpec generates OpenApi spec see npm run serveSpec generates OpenApi spec see + serve Swagger UI","title":"Skeleton project commands"},{"location":"concepts/#manual-install-existing-project","text":"Before we can use the GrandLineX Kernel we need to set up a PostgressDB. If you want to use an existing DB go to step 7. A simple way to do this is to use a Docker container. If you dount have docker see here Create a docker-compose.yml file. Use a editor services : dev-db : image : postgres volumes : - ./data/db:/var/lib/postgresql/data env_file : - .env ports : - 5432:5432 Or run wget https://raw.githubusercontent.com/GrandlineX/kernel/main/docker-compose.yml -O docker-compose.yml Create a .env file in the root folder of your Project Use a editor DBPATH = localhost DBPORT = 5432 POSTGRES_PASSWORD = example POSTGRES_USER = dbuser SERVER_PASSWOR = pw PUBLICDOMAIN = http://localhost Or run wget https://raw.githubusercontent.com/GrandlineX/kernel/main/.env.example -O .env Now we can start the database with docker-compose up -d or docker compose up -d Install the kernel package npm i @grandlinex/kernel Create a Basic Kernel Object main.ts/main.js import Kernel from \"@grandlinex/kernel\" const kernel = new Kernel ({ appName : \"AppName\" , appCode : \"appcode\" , }) kernel . start (); Start node main.js \\ ts-node main.ts","title":"Manual install (Existing Project)"},{"location":"introduction/","text":"What is GrandLineX ? A : GrandLineX is a framework for building Web APIs, Electron Apps and all kinds of server environments. It comes with its own object-relational mapping (ORM) and manny other features. Why GrandLineX was started ? A : This project was started because I wanted to build a modular framework that is easy to use and uses as little as possible other dependency's. Because of this, the core package only depending on one JS/TS language-feature package. What means modular framework ? A : A modular framework is one that scopes project-functionality into several divided bundles with seperated resources like a Database Connections or a Web-Server. These bundles are called Modules. They are working standalone and can be used in other projects. The only requirement is that they are registered in a GLX-Runtime. The Project serves tree types of Runtime's these are the three Kernel packages. In the concept chapter you can find more information about the project environment.","title":"Introduction"},{"location":"introduction/#what-is-grandlinex","text":"A : GrandLineX is a framework for building Web APIs, Electron Apps and all kinds of server environments. It comes with its own object-relational mapping (ORM) and manny other features.","title":"What is GrandLineX ?"},{"location":"introduction/#why-grandlinex-was-started","text":"A : This project was started because I wanted to build a modular framework that is easy to use and uses as little as possible other dependency's. Because of this, the core package only depending on one JS/TS language-feature package.","title":"Why GrandLineX was started ?"},{"location":"introduction/#what-means-modular-framework","text":"A : A modular framework is one that scopes project-functionality into several divided bundles with seperated resources like a Database Connections or a Web-Server. These bundles are called Modules. They are working standalone and can be used in other projects. The only requirement is that they are registered in a GLX-Runtime. The Project serves tree types of Runtime's these are the three Kernel packages. In the concept chapter you can find more information about the project environment.","title":"What means modular framework ?"},{"location":"utils/","text":"Util List Project-Tool Docs to OpenApi Project-Tool Description Cli for the GrandLineX Project Features Create new GrandLineX project with customizable project setup. Update GrandLineX packages Quick start Run npm i -g @grandlinex/project-tool Start CLI gltool -i or npx @grandlinex/project-tool -i Swagger-Mate GrandLineX Swagger-Mate project Status Issues Features Generate swagger.{json|yml} from code Generate Api client from swagger.{json|yml} Documentation Documentation Quick Start Install Insatal npm package npm i @grandlinex/swagger-mate Update package.json { //... \"scripts\" : { \"makeSpec\" : \"swagger-mate\" , \"serveSpec\" : \"swagger-mate --serve\" , \"buildSpecMain\" : \"swagger-mate --build --main\" , \"buildSpecDev\" : \"swagger-mate --build --dev\" }, \"glx\" : { \"kernel\" : \"dist/Kernel.js\" } //... } Command Description npm run makeSpec make openapi.json npm run serveSpec serve openapi.json with swagger-ui npm run buildSpecMain build api client (prod) npm run buildSpecDev build api client (dev) Serve option Default port = 9000 ENV variables ENV Description SW_PORT set custom serve port SW_AUTH set default bearer token Define types Kernel import { SPathUtil , Swagger } from '@grandlinex/swagger-mate' ; // OpenApi 3.0.3 - Root Api definition @Swagger ({ info : { title : 'KernelTest' , version : '0.1.0' , // Version (optional) will be read from package.json }, openapi : '3.0.3' , servers : [ { url : 'http://localhost:9257' , description : 'LocalDev' , }, ], paths : { // Static definition '/version' : { get : { description : 'Get version' , operationId : 'getVersion' , responses : SPathUtil.defaultResponse ( '200' , '500' ), }, }, // Dynamic definition will be read from @SPath }, security : [ { bearerAuth : [], }, ], components : { securitySchemes : { bearerAuth : { type : 'http' , scheme : 'bearer' , bearerFormat : 'JWT' , }, }, }, }) export default class SomeKernel {} Action import { SPathUtil , Swagger } from '@grandlinex/swagger-mate' ; // OpenApi 3.0.3 - Patch definition @SPath ({ '/test' : { get : { description : 'test' , operationId : 'getTest' , // name for the js api client summary : 'Descritption summary' , responses : SPathUtil.defaultResponse ( '200' , '400' , '500' ) }, }, }) export default class SomeBaseApiAction {}","title":"Utils"},{"location":"utils/#util-list","text":"Project-Tool Docs to OpenApi","title":"Util List"},{"location":"utils/#project-tool","text":"","title":"Project-Tool"},{"location":"utils/#description","text":"Cli for the GrandLineX Project","title":"Description"},{"location":"utils/#features","text":"Create new GrandLineX project with customizable project setup. Update GrandLineX packages","title":"Features"},{"location":"utils/#quick-start","text":"Run npm i -g @grandlinex/project-tool Start CLI gltool -i or npx @grandlinex/project-tool -i","title":"Quick start"},{"location":"utils/#swagger-mate","text":"GrandLineX Swagger-Mate project","title":"Swagger-Mate"},{"location":"utils/#status","text":"","title":"Status"},{"location":"utils/#issues","text":"","title":"Issues"},{"location":"utils/#features_1","text":"Generate swagger.{json|yml} from code Generate Api client from swagger.{json|yml}","title":"Features"},{"location":"utils/#documentation","text":"Documentation","title":"Documentation"},{"location":"utils/#quick-start_1","text":"","title":"Quick Start"},{"location":"utils/#install","text":"Insatal npm package npm i @grandlinex/swagger-mate Update package.json { //... \"scripts\" : { \"makeSpec\" : \"swagger-mate\" , \"serveSpec\" : \"swagger-mate --serve\" , \"buildSpecMain\" : \"swagger-mate --build --main\" , \"buildSpecDev\" : \"swagger-mate --build --dev\" }, \"glx\" : { \"kernel\" : \"dist/Kernel.js\" } //... } Command Description npm run makeSpec make openapi.json npm run serveSpec serve openapi.json with swagger-ui npm run buildSpecMain build api client (prod) npm run buildSpecDev build api client (dev)","title":"Install"},{"location":"utils/#serve-option","text":"Default port = 9000 ENV variables ENV Description SW_PORT set custom serve port SW_AUTH set default bearer token","title":"Serve option"},{"location":"utils/#define-types","text":"","title":"Define types"},{"location":"utils/#kernel","text":"import { SPathUtil , Swagger } from '@grandlinex/swagger-mate' ; // OpenApi 3.0.3 - Root Api definition @Swagger ({ info : { title : 'KernelTest' , version : '0.1.0' , // Version (optional) will be read from package.json }, openapi : '3.0.3' , servers : [ { url : 'http://localhost:9257' , description : 'LocalDev' , }, ], paths : { // Static definition '/version' : { get : { description : 'Get version' , operationId : 'getVersion' , responses : SPathUtil.defaultResponse ( '200' , '500' ), }, }, // Dynamic definition will be read from @SPath }, security : [ { bearerAuth : [], }, ], components : { securitySchemes : { bearerAuth : { type : 'http' , scheme : 'bearer' , bearerFormat : 'JWT' , }, }, }, }) export default class SomeKernel {}","title":"Kernel"},{"location":"utils/#action","text":"import { SPathUtil , Swagger } from '@grandlinex/swagger-mate' ; // OpenApi 3.0.3 - Patch definition @SPath ({ '/test' : { get : { description : 'test' , operationId : 'getTest' , // name for the js api client summary : 'Descritption summary' , responses : SPathUtil.defaultResponse ( '200' , '400' , '500' ) }, }, }) export default class SomeBaseApiAction {}","title":"Action"},{"location":"concepts/basic/","text":"Basic Concepts GrandLineX is a framework for building Web APIs, Electron Apps and all kinds of server environments. It comes with its own object-relational mapping (ORM) and manny other features. Project Structure All GrandLineX projects have the same basic structure. The following diagram shows the most important components. The Kernel The kernel is the heart or a GLX-Project. It serves as a runtime environment for the modules. It is the only component that is required to run a GLX-Project. The kernel is responsible for the following tasks: Manage the registered modules Serves a Configuration store, that contains shared inforation like environment variables. The Config store can be prefilled from a .env file or the process environment. A basic encryption client for encrypting and decrypting data. The encryption client can be used to encrypt and decrypt credentials and other critical information. A basic logger interface that can be used to log information to the console. The Modules The modules are the place where the feature functionality is implemented. They contain the following base resources, that are not required to be used: Database Connection The database connection is used to connect to a database and execute queries. Managed by the GLX-ORM (Object Relational Mapping). The ORM is used to create,manage, update and delete the database entity's. Cache Connection The cache connection is used to connect to a cache server and execute queries. Client The Module client is used to define some module specific routines that can possibly be shared with other modules. Presenter The presenter can be used to create a web-server, an electron interface and more. The ExpressKernel contains a ready to use presenter/web-server on base of express.js. The ElectronKernel contains a ready to use presenter/electron-ipc emitter for Node to Frontend communication. Then modules have two types of resources that can be registerd to the module: 1. Service - A Service is a class that can be used to implement business logic as a background task. - The service can be used to implement a cronjob, a background task or a long running process. 2. Action - Defines a function that can be called from the outside. - In case of the BaseAction of the Express-Kernel-Package, the action can be called from a HTTP request. - In case of the BaseAction of the Electron-Kernel-Package, the action can be called from a Electron-IPC call. The Bridges Bridges are used to connect one module to another. In the Module definition you can require other modules and use there resources in your module. If the Kernel startes it will resolve all dependencies of the modules, check for dependency cycles and create a bridge for each requirement. So the first bridges do is to connect two modules together, but they are also be used to set the module start up order. If the kernel notifies the modules to start up, all modules try to start up the same time, only modules that have required another module will wait until all required modules are completely started.","title":"Concepts"},{"location":"concepts/basic/#basic-concepts","text":"GrandLineX is a framework for building Web APIs, Electron Apps and all kinds of server environments. It comes with its own object-relational mapping (ORM) and manny other features.","title":"Basic Concepts"},{"location":"concepts/basic/#project-structure","text":"All GrandLineX projects have the same basic structure. The following diagram shows the most important components.","title":"Project Structure"},{"location":"concepts/basic/#the-kernel","text":"The kernel is the heart or a GLX-Project. It serves as a runtime environment for the modules. It is the only component that is required to run a GLX-Project. The kernel is responsible for the following tasks: Manage the registered modules Serves a Configuration store, that contains shared inforation like environment variables. The Config store can be prefilled from a .env file or the process environment. A basic encryption client for encrypting and decrypting data. The encryption client can be used to encrypt and decrypt credentials and other critical information. A basic logger interface that can be used to log information to the console.","title":"The Kernel"},{"location":"concepts/basic/#the-modules","text":"The modules are the place where the feature functionality is implemented. They contain the following base resources, that are not required to be used: Database Connection The database connection is used to connect to a database and execute queries. Managed by the GLX-ORM (Object Relational Mapping). The ORM is used to create,manage, update and delete the database entity's. Cache Connection The cache connection is used to connect to a cache server and execute queries. Client The Module client is used to define some module specific routines that can possibly be shared with other modules. Presenter The presenter can be used to create a web-server, an electron interface and more. The ExpressKernel contains a ready to use presenter/web-server on base of express.js. The ElectronKernel contains a ready to use presenter/electron-ipc emitter for Node to Frontend communication. Then modules have two types of resources that can be registerd to the module: 1. Service - A Service is a class that can be used to implement business logic as a background task. - The service can be used to implement a cronjob, a background task or a long running process. 2. Action - Defines a function that can be called from the outside. - In case of the BaseAction of the Express-Kernel-Package, the action can be called from a HTTP request. - In case of the BaseAction of the Electron-Kernel-Package, the action can be called from a Electron-IPC call.","title":"The Modules"},{"location":"concepts/basic/#the-bridges","text":"Bridges are used to connect one module to another. In the Module definition you can require other modules and use there resources in your module. If the Kernel startes it will resolve all dependencies of the modules, check for dependency cycles and create a bridge for each requirement. So the first bridges do is to connect two modules together, but they are also be used to set the module start up order. If the kernel notifies the modules to start up, all modules try to start up the same time, only modules that have required another module will wait until all required modules are completely started.","title":"The Bridges"},{"location":"getting_started/electron/","text":"Express Kernel - Getting Started Install Express Kernel That includes: Full Typescript project setup ESLint config with AirBnB & Prettier presets Example Kernel Extension code @/src Webpack config for Electron and Web builds ElectronUI - React base setup (can be replaced) Option 01 - gltool Install from GrandLineX Project Tool If Project tool is not installed, please install it first. You can use the following command to install the tool. npm install @grandlinex/project-tool -g Create new Demo-Project gltool --template = electron && cd grandlinex-project Or use the interactive mode fore more options gltool -i Option 02 - Clone from Github git clone https://github.com/GrandlineX/electron-skeleton-project.git cd grandlinex-electron-project npm install Recompile dependencies npm run recompile Start App npm run start Base Commands Command Description npm run start One click start preview (no DEV-Mode) npm run lint start ESLint npm run buildServe Start webpack serve (hot reload) for frontend npm run startDev Start the Electron App (DevMode for buildServe ) npm run package Build/Pack the full app as a executable file","title":"Electron"},{"location":"getting_started/electron/#express-kernel-getting-started","text":"","title":"Express Kernel - Getting Started"},{"location":"getting_started/electron/#install-express-kernel","text":"That includes: Full Typescript project setup ESLint config with AirBnB & Prettier presets Example Kernel Extension code @/src Webpack config for Electron and Web builds ElectronUI - React base setup (can be replaced)","title":"Install Express Kernel"},{"location":"getting_started/electron/#option-01-gltool","text":"Install from GrandLineX Project Tool If Project tool is not installed, please install it first. You can use the following command to install the tool. npm install @grandlinex/project-tool -g Create new Demo-Project gltool --template = electron && cd grandlinex-project Or use the interactive mode fore more options gltool -i","title":"Option 01 - gltool"},{"location":"getting_started/electron/#option-02-clone-from-github","text":"git clone https://github.com/GrandlineX/electron-skeleton-project.git cd grandlinex-electron-project npm install","title":"Option 02 - Clone from Github"},{"location":"getting_started/electron/#recompile-dependencies","text":"npm run recompile","title":"Recompile dependencies"},{"location":"getting_started/electron/#start-app","text":"npm run start","title":"Start App"},{"location":"getting_started/electron/#base-commands","text":"Command Description npm run start One click start preview (no DEV-Mode) npm run lint start ESLint npm run buildServe Start webpack serve (hot reload) for frontend npm run startDev Start the Electron App (DevMode for buildServe ) npm run package Build/Pack the full app as a executable file","title":"Base Commands"},{"location":"getting_started/express/","text":"Express Kernel - Getting Started Install Express Kernel That includes: Full Typescript project setup Jest test and coverage config ESLint config with AirBnB & Prettier presets Example Kernel Extension code @/src Option 01 - gltool Install from GrandLineX Project Tool If Project tool is not installed, please install it first. You can use the following command to install the tool. npm install @grandlinex/project-tool -g Create new Demo-Project gltool --template = express && cd grandlinex-project Or use the interactive mode fore more options gltool -i Option 02 - Clone from Github git clone https://github.com/GrandlineX/skeleton-project.git cd skeleton-project npm install Check your installation npm run test Base Commands Command Description npm run build build project npm run start run build project npm run startDev build & run project npm run lint start ESLint npm run test start Jest test collection (creates db entry's) npm run test-converage start Jest test collection + coverage report (creates db entry's) npm run start-dev start dev script with disabled cors npm run makeDocs generates Typedoc documentation","title":"Express"},{"location":"getting_started/express/#express-kernel-getting-started","text":"","title":"Express Kernel - Getting Started"},{"location":"getting_started/express/#install-express-kernel","text":"That includes: Full Typescript project setup Jest test and coverage config ESLint config with AirBnB & Prettier presets Example Kernel Extension code @/src","title":"Install Express Kernel"},{"location":"getting_started/express/#option-01-gltool","text":"Install from GrandLineX Project Tool If Project tool is not installed, please install it first. You can use the following command to install the tool. npm install @grandlinex/project-tool -g Create new Demo-Project gltool --template = express && cd grandlinex-project Or use the interactive mode fore more options gltool -i","title":"Option 01 - gltool"},{"location":"getting_started/express/#option-02-clone-from-github","text":"git clone https://github.com/GrandlineX/skeleton-project.git cd skeleton-project npm install","title":"Option 02 - Clone from Github"},{"location":"getting_started/express/#check-your-installation","text":"npm run test","title":"Check your installation"},{"location":"getting_started/express/#base-commands","text":"Command Description npm run build build project npm run start run build project npm run startDev build & run project npm run lint start ESLint npm run test start Jest test collection (creates db entry's) npm run test-converage start Jest test collection + coverage report (creates db entry's) npm run start-dev start dev script with disabled cors npm run makeDocs generates Typedoc documentation","title":"Base Commands"},{"location":"p/bundle/cache/redis/","text":"GrandLineX Redis Bundle Redis cache support GrandLineX using redis Description Status Issues Documentation Documentation","title":"Redis"},{"location":"p/bundle/cache/redis/#grandlinex-redis-bundle","text":"Redis cache support GrandLineX using redis","title":"GrandLineX Redis Bundle"},{"location":"p/bundle/cache/redis/#description","text":"","title":"Description"},{"location":"p/bundle/cache/redis/#status","text":"","title":"Status"},{"location":"p/bundle/cache/redis/#issues","text":"","title":"Issues"},{"location":"p/bundle/cache/redis/#documentation","text":"Documentation","title":"Documentation"},{"location":"p/bundle/database/pg/","text":"GrandLineX Postgresql Bundle Postgresql support GrandLineX using pg Description Status Issues Documentation Documentation Installation Install the package. npm install @grandlinex/bundle-postgresql Add the database configuration to your .env file or directly in kernel config store. POSTGRES_PASSWORD=<** password **> POSTGRES_USER=<** user **> DBPATH=<** ip or host **> DBPORT=<** port **> Create a new DatabaseConnector Class: ExampleDb.ts import { CoreKernelModule } from '@grandlinex/core' ; // Import the DatabaseConnector Class. import PGCon from '@grandlinex/bundle-postgresql' ; export default class ExampleDb extends PGCon { constructor ( mod : CoreKernelModule < any , any , any , any , any > ) { super ( mod , '0' ); // pass the module and the version of the database // register entities or migrations here } async initNewDB () { // init stuff } } Register the DatabaseConnector in module : ExampleModule.ts import { CoreKernelModule , ICoreKernel } from '@grandlinex/core' ; import ExampleDb from './ExampleDb' ; export default class ExampleModule extends CoreKernelModule < any , ExampleDb , any , any , any > { constructor ( kernel : ICoreKernel ) { super ( 'example_module' , kernel ); // add other services or actions } async initModule () : Promise < void > { // register the database connector this . setDb ( new ExampleDb ( this )); // register other resources } } Finally register ExampleModule to the kernel.","title":"Postgres"},{"location":"p/bundle/database/pg/#grandlinex-postgresql-bundle","text":"Postgresql support GrandLineX using pg","title":"GrandLineX Postgresql Bundle"},{"location":"p/bundle/database/pg/#description","text":"","title":"Description"},{"location":"p/bundle/database/pg/#status","text":"","title":"Status"},{"location":"p/bundle/database/pg/#issues","text":"","title":"Issues"},{"location":"p/bundle/database/pg/#documentation","text":"Documentation","title":"Documentation"},{"location":"p/bundle/database/pg/#installation","text":"Install the package. npm install @grandlinex/bundle-postgresql Add the database configuration to your .env file or directly in kernel config store. POSTGRES_PASSWORD=<** password **> POSTGRES_USER=<** user **> DBPATH=<** ip or host **> DBPORT=<** port **> Create a new DatabaseConnector Class: ExampleDb.ts import { CoreKernelModule } from '@grandlinex/core' ; // Import the DatabaseConnector Class. import PGCon from '@grandlinex/bundle-postgresql' ; export default class ExampleDb extends PGCon { constructor ( mod : CoreKernelModule < any , any , any , any , any > ) { super ( mod , '0' ); // pass the module and the version of the database // register entities or migrations here } async initNewDB () { // init stuff } } Register the DatabaseConnector in module : ExampleModule.ts import { CoreKernelModule , ICoreKernel } from '@grandlinex/core' ; import ExampleDb from './ExampleDb' ; export default class ExampleModule extends CoreKernelModule < any , ExampleDb , any , any , any > { constructor ( kernel : ICoreKernel ) { super ( 'example_module' , kernel ); // add other services or actions } async initModule () : Promise < void > { // register the database connector this . setDb ( new ExampleDb ( this )); // register other resources } } Finally register ExampleModule to the kernel.","title":"Installation"},{"location":"p/bundle/database/sql/","text":"GrandLineX SQLight Bundle SQLight support GrandLineX using better-sqlite3 Description Status Issues Documentation Documentation Test Report Installation Install the package. npm install @grandlinex/bundle-sqlight Add the database configuration to your .env file or directly in kernel config store. POSTGRES_PASSWORD=<** password **> POSTGRES_USER=<** user **> DBPATH=<** ip or host **> DBPORT=<** port **> Create a new DatabaseConnector Class: ExampleDb.ts import { CoreKernelModule } from '@grandlinex/core' ; // Import the DatabaseConnector Class. import SQLCon from '@grandlinex/bundle-sqlight' ; export default class ExampleDb extends SQLCon { constructor ( mod : CoreKernelModule < any , any , any , any , any > ) { super ( mod , '0' ); // pass the module and the version of the database // register entities or migrations here } async initNewDB () { // init stuff } } Register the DatabaseConnector in module : ExampleModule.ts import { CoreKernelModule , ICoreKernel } from '@grandlinex/core' ; import ExampleDb from './ExampleDb' ; export default class ExampleModule extends CoreKernelModule < any , ExampleDb , any , any , any > { constructor ( kernel : ICoreKernel ) { super ( 'example_module' , kernel ); // add other services or actions } async initModule () : Promise < void > { // register the database connector this . setDb ( new ExampleDb ( this )); // register other resources } } Finally register ExampleModule to the kernel.","title":"Sqlite"},{"location":"p/bundle/database/sql/#grandlinex-sqlight-bundle","text":"SQLight support GrandLineX using better-sqlite3","title":"GrandLineX SQLight Bundle"},{"location":"p/bundle/database/sql/#description","text":"","title":"Description"},{"location":"p/bundle/database/sql/#status","text":"","title":"Status"},{"location":"p/bundle/database/sql/#issues","text":"","title":"Issues"},{"location":"p/bundle/database/sql/#documentation","text":"Documentation Test Report","title":"Documentation"},{"location":"p/bundle/database/sql/#installation","text":"Install the package. npm install @grandlinex/bundle-sqlight Add the database configuration to your .env file or directly in kernel config store. POSTGRES_PASSWORD=<** password **> POSTGRES_USER=<** user **> DBPATH=<** ip or host **> DBPORT=<** port **> Create a new DatabaseConnector Class: ExampleDb.ts import { CoreKernelModule } from '@grandlinex/core' ; // Import the DatabaseConnector Class. import SQLCon from '@grandlinex/bundle-sqlight' ; export default class ExampleDb extends SQLCon { constructor ( mod : CoreKernelModule < any , any , any , any , any > ) { super ( mod , '0' ); // pass the module and the version of the database // register entities or migrations here } async initNewDB () { // init stuff } } Register the DatabaseConnector in module : ExampleModule.ts import { CoreKernelModule , ICoreKernel } from '@grandlinex/core' ; import ExampleDb from './ExampleDb' ; export default class ExampleModule extends CoreKernelModule < any , ExampleDb , any , any , any > { constructor ( kernel : ICoreKernel ) { super ( 'example_module' , kernel ); // add other services or actions } async initModule () : Promise < void > { // register the database connector this . setDb ( new ExampleDb ( this )); // register other resources } } Finally register ExampleModule to the kernel.","title":"Installation"},{"location":"p/bundle/logger/elogger/","text":"GrandLineX ELogger Bundle Advanced logging support GrandLineX using electron-log Description Status Issues Documentation Documentation Installation Install the package. npm install @grandlinex/bundle-elogger Register the Logger in existing kernel import { CoreKernel } from '@grandlinex/core' ; import ELogger from '@grandlinex/bundle-elogger' ; export default class ExampleKernel extends CoreKernel < any > { constructor () { super ({ // ... other properties logger : ( k ) => new ELogger ( k ), }); } } Finally register ExampleModule to the kernel.","title":"Electron Logger"},{"location":"p/bundle/logger/elogger/#grandlinex-elogger-bundle","text":"Advanced logging support GrandLineX using electron-log","title":"GrandLineX ELogger Bundle"},{"location":"p/bundle/logger/elogger/#description","text":"","title":"Description"},{"location":"p/bundle/logger/elogger/#status","text":"","title":"Status"},{"location":"p/bundle/logger/elogger/#issues","text":"","title":"Issues"},{"location":"p/bundle/logger/elogger/#documentation","text":"Documentation","title":"Documentation"},{"location":"p/bundle/logger/elogger/#installation","text":"Install the package. npm install @grandlinex/bundle-elogger Register the Logger in existing kernel import { CoreKernel } from '@grandlinex/core' ; import ELogger from '@grandlinex/bundle-elogger' ; export default class ExampleKernel extends CoreKernel < any > { constructor () { super ({ // ... other properties logger : ( k ) => new ELogger ( k ), }); } } Finally register ExampleModule to the kernel.","title":"Installation"},{"location":"p/kernel/core/","text":"GrandLineX Core Dependency free base kernel module Description GrandLineX is an out-of-the-box server framework. This package contains the core module and is a dependency for all other GrandLineX packages. It contains the base classes and interfaces for the other modules. [ Typedoc ] When to use If you want to create a new GrandLineX module that also works with the Electron and the Express kernel, you should use this package as a dependency. If you want to create a Project that do not need the Express or Electron functionality, you can use this package as a dependency. Status Issues Documentation Documentation Test Report","title":"Core"},{"location":"p/kernel/core/#grandlinex-core","text":"Dependency free base kernel module","title":"GrandLineX Core"},{"location":"p/kernel/core/#description","text":"GrandLineX is an out-of-the-box server framework. This package contains the core module and is a dependency for all other GrandLineX packages. It contains the base classes and interfaces for the other modules. [ Typedoc ]","title":"Description"},{"location":"p/kernel/core/#when-to-use","text":"If you want to create a new GrandLineX module that also works with the Electron and the Express kernel, you should use this package as a dependency. If you want to create a Project that do not need the Express or Electron functionality, you can use this package as a dependency.","title":"When to use"},{"location":"p/kernel/core/#status","text":"","title":"Status"},{"location":"p/kernel/core/#issues","text":"","title":"Issues"},{"location":"p/kernel/core/#documentation","text":"Documentation Test Report","title":"Documentation"},{"location":"p/kernel/electron/","text":"Description GrandLineX is an out-of-the-box server framework on top of ElectronJS . Dependencies GrandLineX Core Status Issues Documentation Documentation Installation See @GettingStarted","title":"Electron"},{"location":"p/kernel/electron/#description","text":"GrandLineX is an out-of-the-box server framework on top of ElectronJS .","title":"Description"},{"location":"p/kernel/electron/#dependencies","text":"GrandLineX Core","title":"Dependencies"},{"location":"p/kernel/electron/#status","text":"","title":"Status"},{"location":"p/kernel/electron/#issues","text":"","title":"Issues"},{"location":"p/kernel/electron/#documentation","text":"Documentation","title":"Documentation"},{"location":"p/kernel/electron/#installation","text":"See @GettingStarted","title":"Installation"},{"location":"p/kernel/express/","text":"GrandLineX Express-Kernel Description GrandLineX is an out-of-the-box server framework on top of ExpressJs . Dependencies GrandLineX Core Status Issues Documentation Documentation Installation See @GettingStarted","title":"Express"},{"location":"p/kernel/express/#grandlinex-express-kernel","text":"","title":"GrandLineX Express-Kernel"},{"location":"p/kernel/express/#description","text":"GrandLineX is an out-of-the-box server framework on top of ExpressJs .","title":"Description"},{"location":"p/kernel/express/#dependencies","text":"GrandLineX Core","title":"Dependencies"},{"location":"p/kernel/express/#status","text":"","title":"Status"},{"location":"p/kernel/express/#issues","text":"","title":"Issues"},{"location":"p/kernel/express/#documentation","text":"Documentation","title":"Documentation"},{"location":"p/kernel/express/#installation","text":"See @GettingStarted","title":"Installation"},{"location":"p/react/react/","text":"React react-components Info This package includes: GlX-Styled-SCSS-Framework GlX-Styled-React-Components Icon Pack ( Ionicons v5 ) See react-icon Demo and Storybook Storybook CodeSandbox Quick Start npm i @grandlinex/react-components Include style file in your main render file (CSS or SCSS) // CSS import '@grandlinex/react-components/css/style.css' ; // OR SCSS import '@grandlinex/react-components/style/style.scss' ; By default, the dark theme is enabled, to use the light theme add the following class glx-theme-light to your main container. Done \ud83c\udf89 react-icons Info This package includes: Icon Pack ( Ionicons v5 ) Icon wrapper Component","title":"React"},{"location":"p/react/react/#react","text":"","title":"React"},{"location":"p/react/react/#react-components","text":"","title":"react-components"},{"location":"p/react/react/#info","text":"","title":"Info"},{"location":"p/react/react/#this-package-includes","text":"GlX-Styled-SCSS-Framework GlX-Styled-React-Components Icon Pack ( Ionicons v5 ) See react-icon","title":"This package includes:"},{"location":"p/react/react/#demo-and-storybook","text":"Storybook CodeSandbox","title":"Demo and Storybook"},{"location":"p/react/react/#quick-start","text":"npm i @grandlinex/react-components Include style file in your main render file (CSS or SCSS) // CSS import '@grandlinex/react-components/css/style.css' ; // OR SCSS import '@grandlinex/react-components/style/style.scss' ; By default, the dark theme is enabled, to use the light theme add the following class glx-theme-light to your main container. Done \ud83c\udf89","title":"Quick Start"},{"location":"p/react/react/#react-icons","text":"","title":"react-icons"},{"location":"p/react/react/#info_1","text":"","title":"Info"},{"location":"p/react/react/#this-package-includes_1","text":"Icon Pack ( Ionicons v5 ) Icon wrapper Component","title":"This package includes:"}]}